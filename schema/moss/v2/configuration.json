{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MoSS Schema Definition",
    "type": "object",
    "required": [
        "name",
        "version",
        "members"
    ],
    "properties": {
        "name": {
            "title": "Name",
            "description": "The name of schema or target device",
            "type": "string",
            "minLength": 1
        },
        "version": {
            "title": "Version",
            "description": "The version of current configuration",
            "type": "string",
            "minLength": 1,
            "pattern": "^(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)$",
            "default": "0.0"
        },
        "byte-order": {
            "title": "Byte Order",
            "deprecated": true,
            "description": "!!! DEPRECATED !!!! Word/DWord byte order used on a Modbus device",
            "type": "string",
            "enum": [
                "abcd",
                "badc",
                "cdab",
                "dcba"
            ],
            "default": "abcd"
        },
        "flip-rules": {
            "title": "Byte Flip Rules",
            "type": "object",
            "description": "Rules for flipping bytes, words, and double words in a Modbus packet. Each rule has a number that tells the order in which it will be applied. If the number is negative (<0), the rule will NOT be applied. Lower numbers are executed first (e.g., 1 runs before 2).",
            "properties": {
                "reverse-bytes": {
                    "title": "Reverse Bytes",
                    "type": "integer",
                    "description": "Reverse the order of ALL bytes in the packet. Example: if the packet is [1, 2, 3, 4], after reversing it becomes [4, 3, 2, 1].",
                    "minimum": -1
                },
                "flip-bytes": {
                    "title": "Flip Bytes",
                    "type": "integer",
                    "description": "Swap individual bytes at specified positions. Example: if the packet is [1, 2, 3, 4], swapping bytes at positions 1 and 4 results in [4, 2, 3, 1].",
                    "minimum": -1
                },
                "flip-words": {
                    "title": "Flip Words",
                    "type": "integer",
                    "description": "Swap 2-byte words (16 bits) at specified positions. Example: if the packet is [1, 2, 3, 4], where [1, 2] is one word and [3, 4] is another, swapping them results in [3, 4, 1, 2].",
                    "minimum": -1
                },
                "flip-dwords": {
                    "title": "Flip DWords",
                    "type": "integer",
                    "description": "Swap 4-byte double words (32 bits) at specified positions. Example: if the packet is [1, 2, 3, 4, 5, 6, 7, 8], where [1, 2, 3, 4] is one double word and [5, 6, 7, 8] is another, swapping them results in [5, 6, 7, 8, 1, 2, 3, 4].",
                    "minimum": -1
                }
            },
            "additionalProperties": false,
            "required": []
        },
        "members": {
            "$ref": "#/definitions/MembersTree"
        }
    },
    "definitions": {
        "MembersTree": {
            "title": "Members",
            "description": "Registers or groups contained in the current group",
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/MembersTreeNode"
            },
            "additionalProperties": false
        },
        "MembersTreeNode": {
            "type": "object",
            "if": {
                "properties": {
                    "type": {
                        "const": "group"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "then": {
                "$ref": "#/definitions/GroupMember"
            },
            "else": {
                "allOf": [
                    {
                        "$ref": "#/definitions/RegisterMember"
                    },
                    {
                        "properties": {
                            "type": {
                                "default": "uint16"
                            }
                        }
                    }
                ]
            }
        },
        "GroupMember": {
            "required": [
                "type",
                "name",
                "members"
            ],
            "properties": {
                "type": {
                    "title": "Type",
                    "description": "The \"group\" member creates a new branch of properties",
                    "type": "string",
                    "const": "group"
                },
                "name": {
                    "$ref": "#/definitions/Name"
                },
                "members": {
                    "$ref": "#/definitions/MembersTree"
                }
            },
            "additionalProperties": false
        },
        "RegisterMember": {
            "required": [
                "name",
                "address"
            ],
            "properties": {
                "type": {
                    "$ref": "#/definitions/Type",
                    "default": "uint16"
                },
                "name": {
                    "$ref": "#/definitions/Name"
                },
                "address": {
                    "title": "Address",
                    "description": "Register address in Modbus register map on server side",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255
                },
                "read-write": {
                    "title": "Read/Write",
                    "description": "Access flags to restrict register read or write operations",
                    "type": "string",
                    "pattern": "^([rw]{1,2})$",
                    "default": "rw"
                },
                "description": {
                    "title": "Description",
                    "description": "Can be multi-line",
                    "type": "string"
                },
                "format": {
                    "title": "Format",
                    "description": "Display format for register. Defines component that will be used.\n\"combo\": use drop-down list (must provide at least one \"variants\" entry)\n\"button\": display Set/Reset button (use with bool only)\n\"flags<N>\": display value as bit sequence",
                    "type": "string",
                    "enum": [
                        "combo",
                        "button",
                        "flags8",
                        "flags16",
                        "flags32"
                    ]
                },
                "variants": {
                    "title": "Variants",
                    "description": "A strict set of parameters used in the drop-down list (format: \"combo\")",
                    "type": "object",
                    "minProperties": 1,
                    "patternProperties": {
                        ".*": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 65535
                        }
                    },
                    "additionalProperties": false
                },
                "min": {
                    "title": "Min",
                    "description": "Minimum value of the register",
                    "type": "number"
                },
                "max": {
                    "title": "Max",
                    "description": "Maximum value of the register",
                    "type": "number"
                },
                "default": {
                    "title": "Default",
                    "description": "Default (initial) value of the register",
                    "type": "number"
                },
                "if": {
                    "properties": {
                        "format": {
                            "const": "combo"
                        }
                    }
                },
                "then": {
                    "required": [
                        "variants"
                    ]
                }
            },
            "additionalProperties": false
        },
        "Type": {
            "title": "Type",
            "description": "Specifies the node type. If the type is \"group\", a separate branch will be created",
            "type": "string",
            "enum": [
                "group",
                "int16",
                "uint16",
                "int32",
                "uint32",
                "int64",
                "uint64",
                "float32",
                "float64",
                "bool"
            ]
        },
        "Name": {
            "title": "Name",
            "description": "Specifies the name of a register or group header",
            "type": "string",
            "minLength": 1
        },
        "additionalProperties": false
    }
}